package com.whatie.ati.androiddemo.database.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whatie.ati.androiddemo.database.entity.SharedDeviceDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHARED_DEVICE_DB".
*/
public class SharedDeviceDBDao extends AbstractDao<SharedDeviceDB, Long> {

    public static final String TABLENAME = "SHARED_DEVICE_DB";

    /**
     * Properties of entity SharedDeviceDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SharedDeviceId = new Property(0, Long.class, "sharedDeviceId", true, "_id");
        public final static Property DevId = new Property(1, String.class, "devId", false, "DEV_ID");
        public final static Property DeviceVoJson = new Property(2, String.class, "deviceVoJson", false, "DEVICE_VO_JSON");
    }


    public SharedDeviceDBDao(DaoConfig config) {
        super(config);
    }
    
    public SharedDeviceDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHARED_DEVICE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sharedDeviceId
                "\"DEV_ID\" TEXT," + // 1: devId
                "\"DEVICE_VO_JSON\" TEXT);"); // 2: deviceVoJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHARED_DEVICE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SharedDeviceDB entity) {
        stmt.clearBindings();
 
        Long sharedDeviceId = entity.getSharedDeviceId();
        if (sharedDeviceId != null) {
            stmt.bindLong(1, sharedDeviceId);
        }
 
        String devId = entity.getDevId();
        if (devId != null) {
            stmt.bindString(2, devId);
        }
 
        String deviceVoJson = entity.getDeviceVoJson();
        if (deviceVoJson != null) {
            stmt.bindString(3, deviceVoJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SharedDeviceDB entity) {
        stmt.clearBindings();
 
        Long sharedDeviceId = entity.getSharedDeviceId();
        if (sharedDeviceId != null) {
            stmt.bindLong(1, sharedDeviceId);
        }
 
        String devId = entity.getDevId();
        if (devId != null) {
            stmt.bindString(2, devId);
        }
 
        String deviceVoJson = entity.getDeviceVoJson();
        if (deviceVoJson != null) {
            stmt.bindString(3, deviceVoJson);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SharedDeviceDB readEntity(Cursor cursor, int offset) {
        SharedDeviceDB entity = new SharedDeviceDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sharedDeviceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // devId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // deviceVoJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SharedDeviceDB entity, int offset) {
        entity.setSharedDeviceId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceVoJson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SharedDeviceDB entity, long rowId) {
        entity.setSharedDeviceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SharedDeviceDB entity) {
        if(entity != null) {
            return entity.getSharedDeviceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SharedDeviceDB entity) {
        return entity.getSharedDeviceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
