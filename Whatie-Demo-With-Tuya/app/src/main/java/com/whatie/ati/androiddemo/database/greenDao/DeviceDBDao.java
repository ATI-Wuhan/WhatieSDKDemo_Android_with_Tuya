package com.whatie.ati.androiddemo.database.greenDao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.whatie.ati.androiddemo.database.entity.HomeDB;
import com.whatie.ati.androiddemo.database.entity.RoomDB;

import com.whatie.ati.androiddemo.database.entity.DeviceDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_DB".
*/
public class DeviceDBDao extends AbstractDao<DeviceDB, Long> {

    public static final String TABLENAME = "DEVICE_DB";

    /**
     * Properties of entity DeviceDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceId = new Property(0, Long.class, "deviceId", true, "_id");
        public final static Property DevId = new Property(1, String.class, "devId", false, "DEV_ID");
        public final static Property RoomId = new Property(2, Long.class, "roomId", false, "ROOM_ID");
        public final static Property HomeId = new Property(3, Long.class, "homeId", false, "HOME_ID");
        public final static Property DeviceVoJson = new Property(4, String.class, "deviceVoJson", false, "DEVICE_VO_JSON");
    }

    private DaoSession daoSession;

    private Query<DeviceDB> homeDB_DeviceDBsQuery;
    private Query<DeviceDB> roomDB_DeviceDBsQuery;

    public DeviceDBDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: deviceId
                "\"DEV_ID\" TEXT," + // 1: devId
                "\"ROOM_ID\" INTEGER," + // 2: roomId
                "\"HOME_ID\" INTEGER," + // 3: homeId
                "\"DEVICE_VO_JSON\" TEXT);"); // 4: deviceVoJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceDB entity) {
        stmt.clearBindings();
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(1, deviceId);
        }
 
        String devId = entity.getDevId();
        if (devId != null) {
            stmt.bindString(2, devId);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(3, roomId);
        }
 
        Long homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindLong(4, homeId);
        }
 
        String deviceVoJson = entity.getDeviceVoJson();
        if (deviceVoJson != null) {
            stmt.bindString(5, deviceVoJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceDB entity) {
        stmt.clearBindings();
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(1, deviceId);
        }
 
        String devId = entity.getDevId();
        if (devId != null) {
            stmt.bindString(2, devId);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(3, roomId);
        }
 
        Long homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindLong(4, homeId);
        }
 
        String deviceVoJson = entity.getDeviceVoJson();
        if (deviceVoJson != null) {
            stmt.bindString(5, deviceVoJson);
        }
    }

    @Override
    protected final void attachEntity(DeviceDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceDB readEntity(Cursor cursor, int offset) {
        DeviceDB entity = new DeviceDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // deviceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // devId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // roomId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // homeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // deviceVoJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceDB entity, int offset) {
        entity.setDeviceId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoomId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setHomeId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDeviceVoJson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceDB entity, long rowId) {
        entity.setDeviceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceDB entity) {
        if(entity != null) {
            return entity.getDeviceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceDB entity) {
        return entity.getDeviceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "deviceDBs" to-many relationship of HomeDB. */
    public List<DeviceDB> _queryHomeDB_DeviceDBs(Long homeId) {
        synchronized (this) {
            if (homeDB_DeviceDBsQuery == null) {
                QueryBuilder<DeviceDB> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HomeId.eq(null));
                homeDB_DeviceDBsQuery = queryBuilder.build();
            }
        }
        Query<DeviceDB> query = homeDB_DeviceDBsQuery.forCurrentThread();
        query.setParameter(0, homeId);
        return query.list();
    }

    /** Internal query to resolve the "deviceDBs" to-many relationship of RoomDB. */
    public List<DeviceDB> _queryRoomDB_DeviceDBs(Long roomId) {
        synchronized (this) {
            if (roomDB_DeviceDBsQuery == null) {
                QueryBuilder<DeviceDB> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null));
                roomDB_DeviceDBsQuery = queryBuilder.build();
            }
        }
        Query<DeviceDB> query = roomDB_DeviceDBsQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRoomDBDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getHomeDBDao().getAllColumns());
            builder.append(" FROM DEVICE_DB T");
            builder.append(" LEFT JOIN ROOM_DB T0 ON T.\"ROOM_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN HOME_DB T1 ON T.\"HOME_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DeviceDB loadCurrentDeep(Cursor cursor, boolean lock) {
        DeviceDB entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RoomDB roomDB = loadCurrentOther(daoSession.getRoomDBDao(), cursor, offset);
        entity.setRoomDB(roomDB);
        offset += daoSession.getRoomDBDao().getAllColumns().length;

        HomeDB homeDB = loadCurrentOther(daoSession.getHomeDBDao(), cursor, offset);
        entity.setHomeDB(homeDB);

        return entity;    
    }

    public DeviceDB loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DeviceDB> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DeviceDB> list = new ArrayList<DeviceDB>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DeviceDB> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DeviceDB> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
