package com.whatie.ati.androiddemo.database.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whatie.ati.androiddemo.database.entity.HomeDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_DB".
*/
public class HomeDBDao extends AbstractDao<HomeDB, Long> {

    public static final String TABLENAME = "HOME_DB";

    /**
     * Properties of entity HomeDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HomeId = new Property(0, Long.class, "homeId", true, "_id");
        public final static Property HomeJson = new Property(1, String.class, "homeJson", false, "HOME_JSON");
    }

    private DaoSession daoSession;


    public HomeDBDao(DaoConfig config) {
        super(config);
    }
    
    public HomeDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: homeId
                "\"HOME_JSON\" TEXT);"); // 1: homeJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeDB entity) {
        stmt.clearBindings();
 
        Long homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindLong(1, homeId);
        }
 
        String homeJson = entity.getHomeJson();
        if (homeJson != null) {
            stmt.bindString(2, homeJson);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeDB entity) {
        stmt.clearBindings();
 
        Long homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindLong(1, homeId);
        }
 
        String homeJson = entity.getHomeJson();
        if (homeJson != null) {
            stmt.bindString(2, homeJson);
        }
    }

    @Override
    protected final void attachEntity(HomeDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeDB readEntity(Cursor cursor, int offset) {
        HomeDB entity = new HomeDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // homeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // homeJson
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeDB entity, int offset) {
        entity.setHomeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomeJson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeDB entity, long rowId) {
        entity.setHomeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeDB entity) {
        if(entity != null) {
            return entity.getHomeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeDB entity) {
        return entity.getHomeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
